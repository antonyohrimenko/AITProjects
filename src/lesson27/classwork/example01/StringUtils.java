package lesson27.classwork.example01;

public interface StringUtils {

    /*
        Проверяет, является ли строка word палиндромом (т.е. можно ли ее одинаково прочитать с начала в конец и с конца в
                начало), игнорируя регистр букв
        Примеры палиндромов (для этих вводов true): 12:21, тенет, Пилип
        Обратите внимание, что, к примеру, "А роза упала на лапу Азора" не будет палиндромом в нашей программе, так как
        в этой строке палиндромными будут только буквы, но не пробелы.
        Дополнительное задание: сделать так, чтобы знаки препинания и пробелы не мешали определению палиндрома
     */
    boolean isPalindrome(String word);


    /*
        Проверяет, является ли строка sentence панграммой (на английском) и возвращает истину если это так.
        Справка: панграмма - такое предложение, в котором каждая буква алфавита использована один раз
        Пример: The quick brown fox jumps over the lazy dog
     */
    boolean isPangram(String sentence);


    /*
        Читает строку в которой записан IPv4 и возвращает массив из 4 значений типа byte со значениями этого айпи
        Для этого сначала нужно разделить строку на подстроки по КАКОМУ-ТО признаку (намек на то что вам нужно понять, по какому именно),
        а потом использовать класс Byte чтобы превратить строки в числа.
        Выбросить исключение, если на любом этапе работы метода была ошибка в введенных данных.
        Примеры айпи: 127.0.0.1, 192.168.0.12, 77.156.21.33
        Обратите внимание, что в результате могут выйти отрицательные числа. Это вполне нормально (см. тему "целочисленное переполнение")

     */
    byte[] parseIp(String ip);


    /*
        Шифрует строку text таким образом, чтобы ее нельзя было с легкостью прочитать.
        Можно использовать любой метод шифрования, либо взять предложенный.

        Предложеный метод: метод Цезаря. Все буквы сдвигаются на 3 вперед по алфавиту для зашифровки и на 3 назад
        по алфавиту для расшифровки.

        Подсказка: табличка ASCII
     */
    String encrypt(String text);


    /*
        Делает противоположное действие со строкой data к тому, которое было сделано в методе encrypt().
        Таким образом, происходит расшифровка, и должно быть получено исходное сообщение
     */
    String decrypt(String data);


    /*
        Считает сколько раз символ letter появляется в строке text и возвращает это число.
        Возвращает 0 если переданная строка равна null, пуста, либо этого символа нет в строке.
     */
    int countOccurencies(String text, char letter);


    /*
        Разворачивает строку text. Например, строка Hello world должна быть превращена в dlrow olleH


     */
    String reverse(String text);

    /*
        Разворачивает порядок слов в строке text (слова разделены пробелами).
        Например, для ввода What a wonderful day результат будет day wonderful a What

     */
    String wordReverse(String text);


    /*
        Переводит текст в строке text в идентификатор в стиле lowerCamelCase
        Например, для ввода What a BEAUTIFUL day должен получиться результат whatABeautifulDay

        Дополнительное задание: также убрать из строки все символы, которые не разрешаются в идентификаторах (напр. знаки препинания)
     */
    String toCamelCase(String text);
}



























